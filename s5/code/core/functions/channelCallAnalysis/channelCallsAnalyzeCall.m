function channelCallsAnalyzeCall(channelObject,callIdx,types,dataset,envDataset,params)
%CHANNELCALLSANALYZECALL Analyze specific call & save
            %{
            call = channelCallAnalyze( call,...
                window,...
                dataset,...
                envDataset,...
                detectionPeakWindow,...
                startThreshold,...
                endThreshold,...
                gapTolerance,...
                forcedBoundries,...
                computeSpectral,...
                computeRidge )
            %}
            call = channelObject.call(callIdx);
            
            window = params.analysisWindow;
            I = call.Detection.Time + window.*[-0.5,+0.5];
            dataset = getInterval(dataset, call.Fs,I);
            envDataset = getInterval(envDataset, call.Fs,I);
            
            call = channelCallAnalyze( call,...
                window,...
                dataset,...
                envDataset,...
                params.d2pWindow,...
                params.startThreshold,...
                params.endThreshold,...
                params.gapTolerance,...
                [],...
                params.computeSpectral,...
                params.computeRidge );
            
            call.AnalysisParameters.filter = [];
            call.AnalysisParameters.filter = params.filterSpecification;
            if ~params.keep
                call.AnalysisParameters.spectrum = [];
                call.AnalysisParameters.spectrogram = [];
                call.AnalysisParameters.envelope = [];
                call.AnalysisParameters.TS = [];
            end            
            
            cellfun(@(t)call.saveCall(t),types);
            
end